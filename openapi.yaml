openapi: 3.0.1
info:
  title: Phylogeny User Service
  description: User authentication service
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://phylogenyexplorerproject.org/v1
tags:
- name: authentication
  description: User Authentication
  externalDocs:
    description: Find out more
    url: http://swagger.io
paths:
  /group:
    put:
      tags:
      - group
      summary: Create group
      operationId: createGroup
      requestBody: 
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: createGroup
    get:
      tags:
      - group
      summary: List groups
      operationId: listGroups
      responses:
        default:
          description: list of groups
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/GroupList"
            application/json:
              schema:
                $ref: "#/components/schemas/GroupList"
  /group/{groupId}/user:
    put:
      tags:
      - group
      - user
      summary: put a user in a group
      parameters:
      - name: groupId
        in: path
        description: group identity
        required: true
        schema:
          type: string
      operationId: addUserToGroup
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              type: object
              properties:
                username:
                  type: string
        required: true
      responses:
        default:
          description: success
          content: {}
    delete:
      tags:
      - group
      - user
      summary: remove a user from a group
      parameters:
      - name: groupId
        in: path
        description: group identity
        required: true
        schema:
          type: string
      operationId: deleteUserFromGroup
      responses:
        default:
          description: success
          content: {}
  /group/{groupId}/role:
    put:
      tags:
      - group
      - role
      summary: put a role in a group
      parameters:
      - name: groupId
        in: path
        description: group identity
        required: true
        schema:
          type: string
      operationId: addRoleToGroup
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              type: object
              properties:
                role:
                  type: string
        required: true
      responses:
        default:
          description: success
          content: {}
    delete:
      tags:
      - group
      summary: remove a role from a group
      parameters:
      - name: groupId
        in: path
        description: group identity
        required: true
        schema:
          type: string
      operationId: deleteRoleFromGroup
      responses:
        default:
          description: success
          content: {}
  /group/{groupId}:
    get:
      tags:
      - group
      summary: list groups
      parameters:
      - name: groupId
        in: path
        description: The user name for login
        required: true
        schema:
          type: string
      operationId: listGroup
      responses:
        default:
          description: list of group information
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/GroupInfo"
            application/json:
              schema:
                $ref: "#/components/schemas/GroupInfo"
    delete:
      tags:
      - group
      summary: Delete group
      parameters:
      - name: groupId
        in: path
        description: The user name for login
        required: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: deleteGroup
  /role:
    put:
      tags:
      - role
      summary: Create role
      operationId: createRole
      requestBody: 
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RoleInfo'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: createRole
    get:
      tags:
      - group
      summary: List roles
      operationId: listRoles
      responses:
        default:
          description: list of roles
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/RoleList"
            application/json:
              schema:
                $ref: "#/components/schemas/RoleList"
  /role/{roleId}:
    get:
      tags:
      - role
      summary: list roles
      parameters:
      - name: roleId
        in: path
        description: the role id to be displayed
        required: true
        schema:
          type: string
      operationId: listRole
      responses:
        default:
          description: list of role information
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/RoleInfo"
            application/json:
              schema:
                $ref: "#/components/schemas/RoleInfo"
    delete:
      tags:
      - role
      summary: Delete role
      parameters:
      - name: roleId
        in: path
        description: The role name to delete
        required: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: deleteGroup
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    RoleInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    RoleList:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
    GroupList:
      type: object
      properties:
        groups:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              groupid:
                type: string
                format: uuid
              link:
                type: string
                format: uri
    GroupInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        users:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
    Group:
      type: object
      required:
      - ide
      - name
      properties:
        id:
          type: string
          format: uuid
        name: 
          type: string
        roles:
          type: array
          items:
            type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
  securitySchemes:
    phylogeny_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://phylogenyproject/oauth/dialog
          scopes:
            write:pets: modify users
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header

